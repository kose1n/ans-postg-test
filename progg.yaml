
---
- hosts: webservers
  become: true
  vars:
    password: '123'
    db_password: some
  
  # 1. На В отключить авторизацию SSH по паролю.
  
  tasks:
  - name: Disbl SSH password authentication
    lineinfile:
      dest=/etc/ssh/sshd_config
      regexp="^PasswordAuthentication"
      line="PasswordAuthentication no"
      state=present
    become: yes
    # notify:
    #   - restart ssh
    
  - name: Restart ssh
    service:
       name: sshd
       state: restarted

   # 2. На В добавить пользователя Devops, настроить авторизацию по ключам и предоставить ему доступ «sudo»  без пароля.    
  #Создает группу, права группе, пользователя в эту группу.
  - name: Add group
    group:
      name: wheel
      state: present
  - name: Allow group
    lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
  - name: Add Devops in group with sudo
    user:
      name: Devops
      password: "{{ password }}"
      shell: /bin/bash
      groups: wheel
      append: yes
      state: present
      createhome: yes

#create key
  - name: Gen SSH key
    user:
      name: Devops
      generate_ssh_key: yes
      ssh_key_bits: 2048
      ssh_key_file: .ssh/id_rsa

  - name: Add authorized key from id_rsa.pub
    authorized_key:
      user: Devops
      state: present
      key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

# 3. На B установить PostgreSQL, создать БД myapp и myauth. Добавить developer пользователя и дать доступ к БД:  myapp — на запись и чтение, myauth— на чтение.
  
  # Install PostgreSQL
  - name: Install packages
    become: yes
    apt:
      name:
      - postgresql
      - postgresql-contrib
      - python3-pip
      - python3-dev
      - python3-venv
      - python3-psycopg2
      state: present

  - name: Start and enable services
    service: "name={{ item }} state=started enabled=yes"
    with_items:
      - postgresql

  #  Create BD
  - name: Create myapp database
    postgresql_db:
      state: present
      name: "myapp"
    become: yes
    become_user: postgres
    
  - name: Create myauth database
    postgresql_db:
      state: present
      name: "myauth"
    become: yes
    become_user: postgres

  # Create user  
  - name: Create postgres user
    become: yes
    become_user: postgres
    postgresql_user:
      name: "developer"
      password: "{{ db_password }}"

  # Privs 1-2
  - name: Privs to dev 1
    become: yes
    become_user: postgres
    postgresql_privs:
      db: myapp
      role: developer
      objs: ALL_IN_SCHEMA
      privs: SELECT,INSERT
  
  - name: Privs to dev 2
    become: yes
    become_user: postgres
    postgresql_privs:
      db: myauth
      role: developer
      objs: ALL_IN_SCHEMA
      privs: SELECT
   
   # 4. Настроить доступ пользователя developer только с сервера  «C»
   # формат одного запуска, для нескольких - лучше оптимизировать, мне кажется.
  - name: Add new configuration to "postgresql.conf"
    blockinfile:
      dest: /etc/postgresql/12/main/postgresql.conf
      block: |
        listen_addresses = '192.168.1.71'

  - name: Add new configuration to "pg_hba.conf"
    blockinfile:
      dest: /etc/postgresql/12/main/pg_hba.conf
      block: |
        host    all             developer             192.168.1.75/24                md5
    
  - name: Restart postgresql
    service:
       name: postgresql
       state: restarted

  #  5. Проверка выполнения запроса с сервера C к PostgreSQL  под  developer.

- name: run sql
  hosts: cserver
  become: true
  vars:
    password: '123'
    db_password: some
#Добавил юзера с правами для удобства
  tasks:
  - name: Add group
    group:
      name: wheel
      state: present
  - name: Allow group
    lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
  - name: Add Devops in group with sudo
    user:
      name: Devops
      password: "{{ password }}"
      shell: /bin/bash
      groups: wheel
      append: yes
      state: present
      createhome: yes
      
   - name: Gen SSH key
     user:
        name: Devops
        generate_ssh_key: yes
        ssh_key_bits: 2048
        ssh_key_file: .ssh/id_rsa

    - name: Add authorized key from id_rsa.pub
      authorized_key:
      user: Devops
      state: present
      key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

    - name: run SQL from C-server
      become: true
      become_user: postgres
      postgresql_query:
         db: myapp
         query: "SELECT version()"
         login_user: developer
         login_password: "{{ db_password }}"
         register: sql_data
      
    - name: print
      debug: 
        var: sql_data
   
# Застрял на ошибке, msg": "Failed to set permissions on the temporary files Ansible needs to create when becoming an unprivileged user (rc: 1, err: chown: invalid user: 'postgres'\n}). For information on working around this,


 # 6. На «В» «С»  можно зайти только с «А». При этом PostgreSQL доступен только «С»
  #  Либо через настройку community.general.ufw двум серверам, либо через запрет пароля в ssh, без передачи ключей.

# Формат:
# - hosts: 1 or 2 serv
#   become: true
#   tasks:
#   - name: Allow all access from servers
#   community.general.ufw:
#     rule: deny
#     src: '{{ item }}'
#   loop:
#     - 


# 3 пк 
# sec ALL=(ALL) NOPASSWD: ALL

# apt-get update 
# sudo apt-get install postgresql-client  
# sudo apt-get install openssh-client openssh-server
